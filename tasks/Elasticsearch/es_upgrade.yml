---
- name: Elasticsearch rolling upgrade
  hosts: elasticsearch
  serial: 1
  become: yes

  vars:
    es_disable_allocation:
      transient:
        cluster.routing.allocation.enable: "none"
    es_enable_allocation:
      transient:
        cluster.routing.allocation.enable: "all"
    es_http_port: 9200
    es_transport_port: 9300
    
    # desired version to upgrade to:
    es_version: 7.17.28

  tasks:
    - name: make sure elasticsearch service is running
      service: name=elasticsearch enabled=yes state=started
      register: response

    - name: Wait for elasticsearch node to come back up if it was stopped
      wait_for: port={{ es_transport_port }} delay=45
      when: response.changed == true

    - name: Ensure python-httplib2 is installed via pip
      pip:
       name: httplib2
       state: present

    - name: check current version
      uri: url=http://localhost:{{ es_http_port }} method=GET
      register: version_found
      retries: 10
      delay: 10

    - name: Display Current Elasticsearch Version
      debug: var=version_found.json.version.number 

    - name: Wait for cluster health to return to green
      uri: url=http://localhost:{{ es_http_port }}/_cluster/health method=GET
      register: response
      until: "response.json.status == 'green'"
      retries: 5
      delay: 10
      when: version_found.json.version.number != '{{ es_version }}'

    - name: Disable shard allocation for the cluster
      uri: 
        url: http://localhost:{{ es_http_port }}/_cluster/settings 
        method: PUT 
        body: "{{ es_disable_allocation | to_json }}"
        body_format: json
      when: version_found.json.version.number != '{{ es_version }}'


    - name: Stop elasticsearch service
      service: 
        name: elasticsearch 
        state: stopped
      when: version_found.json.version.number != '{{ es_version }}'

    - name: Wait for all shards to be reallocated
      uri: url=http://localhost:{{ es_http_port }}/_cluster/health method=GET
      register: response
      until: "response.json.relocating_shards == 0"
      retries: 10
      delay: 30
      when: version_found.json.version.number != '{{ es_version }}'
      ignore_errors: yes

    - name: Download Elasticsearch version
      get_url: 
        url: https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-{{ es_version }}-amd64.deb 
        dest: /tmp/elasticsearch-{{ es_version }}.deb
      when: version_found.json.version.number != '{{ es_version }}'

    - name: Update elasticsearch
      apt: deb=/tmp/elasticsearch-{{ es_version }}.deb
      when: version_found.json.version.number != '{{ es_version }}'

    - name: clean temp file
      file: path=/tmp/elasticsearch-{{ es_version }}.deb state=absent
      when: version_found.json.version.number != '{{ es_version }}'

    - name: Start elasticsearch
      service: name=elasticsearch enabled=yes state=restarted
      when: version_found.json.version.number != '{{ es_version }}'

    - name: Wait for elasticsearch node to come back up
      wait_for: port={{ es_transport_port }} delay=35
      when: version_found.json.version.number != '{{ es_version }}'

    - name: Wait for cluster health to return to yellow or green
      uri: url=http://localhost:{{ es_http_port }}/_cluster/health method=GET
      register: response
      until: "response.json.status == 'yellow' or response.json.status == 'green'"
      retries: 5
      delay: 30
      when: version_found.json.version.number != '{{ es_version }}'

    # - name: Wait for cluster health to return to yellow or green
    #   uri: url=http://localhost:{{ es_http_port }}/_cluster/health method=GET
    #   register: response
    #   until: "response.json.status == 'yellow' or response.json.status == 'green'"
    #   retries: 5
    #   delay: 10
    #   when: version_found.json.version.number != '{{ es_version }}'
    #   ignore_errors: yes

    # - name: Force continue even if not yellow or green
    #   debug:
    #     msg: "Continuing despite cluster health not reaching yellow or green"
    #   when: 
    #     - version_found.json.version.number != '{{ es_version }}'
    #     - response.json.status == 'red'

    - name: Enable shard allocation for the cluster
      uri: 
        url: http://localhost:{{ es_http_port }}/_cluster/settings 
        method: PUT 
        body: "{{ es_enable_allocation | to_json }}"
        body_format: json
      register: response
      until: "response.json.acknowledged == true"
      retries: 5
      delay: 30
      when: version_found.json.version.number != '{{ es_version }}'